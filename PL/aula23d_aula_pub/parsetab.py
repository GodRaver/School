
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "left+-left*rightsimetricoescrever num string varid S : LstV ';'  LstV :  LstV ';' Inst  LstV :  Inst Inst :  escrever string Inst : V   Inst :  escrever E   V : varid '=' E  E : E '+' E  \n              | E '-' E \n              | E '*' E  E : '-' E   %prec simetrico  E : '(' E ')'  E :  num   E :  varid  "
    
_lr_action_items = {'escrever':([0,7,],[4,4,]),'varid':([0,4,7,10,11,14,16,17,18,],[6,13,6,13,13,13,13,13,13,]),'$end':([1,7,],[0,-1,]),';':([2,3,5,8,9,12,13,15,19,21,22,23,24,25,],[7,-3,-5,-4,-6,-13,-14,-2,-11,-7,-8,-9,-10,-12,]),'string':([4,],[8,]),'-':([4,9,10,11,12,13,14,16,17,18,19,20,21,22,23,24,25,],[10,17,10,10,-13,-14,10,10,10,10,-11,17,17,-8,-9,-10,-12,]),'(':([4,10,11,14,16,17,18,],[11,11,11,11,11,11,11,]),'num':([4,10,11,14,16,17,18,],[12,12,12,12,12,12,12,]),'=':([6,],[14,]),'+':([9,12,13,19,20,21,22,23,24,25,],[16,-13,-14,-11,16,16,-8,-9,-10,-12,]),'*':([9,12,13,19,20,21,22,23,24,25,],[18,-13,-14,-11,18,18,18,18,-10,-12,]),')':([12,13,19,20,22,23,24,25,],[-13,-14,-11,25,-8,-9,-10,-12,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'S':([0,],[1,]),'LstV':([0,],[2,]),'Inst':([0,7,],[3,15,]),'V':([0,7,],[5,5,]),'E':([4,10,11,14,16,17,18,],[9,19,20,21,22,23,24,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> S","S'",1,None,None,None),
  ('S -> LstV ;','S',2,'p_s','arith_grammar.py',29),
  ('LstV -> LstV ; Inst','LstV',3,'p_expr_tail','arith_grammar.py',33),
  ('LstV -> Inst','LstV',1,'p_expr_head','arith_grammar.py',39),
  ('Inst -> escrever string','Inst',2,'p_expr_inst_esc_string','arith_grammar.py',43),
  ('Inst -> V','Inst',1,'p_expr_inst_atr','arith_grammar.py',47),
  ('Inst -> escrever E','Inst',2,'p_expr_inst_esc','arith_grammar.py',51),
  ('V -> varid = E','V',3,'p_expr_atrib','arith_grammar.py',55),
  ('E -> E + E','E',3,'p_expr_op','arith_grammar.py',59),
  ('E -> E - E','E',3,'p_expr_op','arith_grammar.py',60),
  ('E -> E * E','E',3,'p_expr_op','arith_grammar.py',61),
  ('E -> - E','E',2,'p_expr_sinalmenos','arith_grammar.py',66),
  ('E -> ( E )','E',3,'p_expr_pare','arith_grammar.py',70),
  ('E -> num','E',1,'p_expr_num','arith_grammar.py',74),
  ('E -> varid','E',1,'p_expr_var','arith_grammar.py',78),
]
