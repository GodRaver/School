
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD ASSIGN CALL COMMA DIV FUNCTION ID LBRACE LPAREN MUL NUM PRINT RBRACE RPAREN SEMICOLON STRING SUB VARprogram : statement_liststatement_list : statement\n                      | statement_list statementstatement : variable_declaration\n                 | assignment\n                 | write_instruction\n                 | function_definition\n                 | function_callvariable_declaration : VAR ID ASSIGN expression SEMICOLONassignment : ID ASSIGN expression SEMICOLONwrite_instruction : PRINT expression_list SEMICOLONexpression_list : expression\n                       | expression_list COMMA expressionexpression : ID\n                  | NUM\n                  | STRING\n                  | LPAREN expression RPAREN\n                  | expression ADD expression\n                  | expression SUB expression\n                  | expression MUL expression\n                  | expression DIV expressionfunction_definition : FUNCTION ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACEparameter_list : ID\n                      | parameter_list COMMA IDfunction_call : CALL ID LPAREN argument_list RPAREN SEMICOLONargument_list : expression\n                     | argument_list COMMA expression'
    
_lr_action_items = {'VAR':([0,2,3,4,5,6,7,8,14,27,37,48,53,55,57,58,],[9,9,-2,-4,-5,-6,-7,-8,-3,-11,-10,-9,9,-25,9,-22,]),'ID':([0,2,3,4,5,6,7,8,9,11,12,13,14,16,22,25,27,28,29,30,31,32,34,35,37,48,50,52,53,55,57,58,],[10,10,-2,-4,-5,-6,-7,-8,15,19,23,24,-3,19,19,19,-11,19,19,19,19,19,44,19,-10,-9,54,19,10,-25,10,-22,]),'PRINT':([0,2,3,4,5,6,7,8,14,27,37,48,53,55,57,58,],[11,11,-2,-4,-5,-6,-7,-8,-3,-11,-10,-9,11,-25,11,-22,]),'FUNCTION':([0,2,3,4,5,6,7,8,14,27,37,48,53,55,57,58,],[12,12,-2,-4,-5,-6,-7,-8,-3,-11,-10,-9,12,-25,12,-22,]),'CALL':([0,2,3,4,5,6,7,8,14,27,37,48,53,55,57,58,],[13,13,-2,-4,-5,-6,-7,-8,-3,-11,-10,-9,13,-25,13,-22,]),'$end':([1,2,3,4,5,6,7,8,14,27,37,48,55,58,],[0,-1,-2,-4,-5,-6,-7,-8,-3,-11,-10,-9,-25,-22,]),'RBRACE':([3,4,5,6,7,8,14,27,37,48,55,57,58,],[-2,-4,-5,-6,-7,-8,-3,-11,-10,-9,-25,58,-22,]),'ASSIGN':([10,15,],[16,25,]),'NUM':([11,16,22,25,28,29,30,31,32,35,52,],[20,20,20,20,20,20,20,20,20,20,20,]),'STRING':([11,16,22,25,28,29,30,31,32,35,52,],[21,21,21,21,21,21,21,21,21,21,21,]),'LPAREN':([11,16,22,23,24,25,28,29,30,31,32,35,52,],[22,22,22,34,35,22,22,22,22,22,22,22,22,]),'SEMICOLON':([17,18,19,20,21,26,36,38,39,40,41,42,43,51,],[27,-12,-14,-15,-16,37,48,-13,-18,-19,-20,-21,-17,55,]),'COMMA':([17,18,19,20,21,38,39,40,41,42,43,44,45,46,47,54,56,],[28,-12,-14,-15,-16,-13,-18,-19,-20,-21,-17,-23,50,52,-26,-24,-27,]),'ADD':([18,19,20,21,26,33,36,38,39,40,41,42,43,47,56,],[29,-14,-15,-16,29,29,29,29,29,29,29,29,-17,29,29,]),'SUB':([18,19,20,21,26,33,36,38,39,40,41,42,43,47,56,],[30,-14,-15,-16,30,30,30,30,30,30,30,30,-17,30,30,]),'MUL':([18,19,20,21,26,33,36,38,39,40,41,42,43,47,56,],[31,-14,-15,-16,31,31,31,31,31,31,31,31,-17,31,31,]),'DIV':([18,19,20,21,26,33,36,38,39,40,41,42,43,47,56,],[32,-14,-15,-16,32,32,32,32,32,32,32,32,-17,32,32,]),'RPAREN':([19,20,21,33,39,40,41,42,43,44,45,46,47,54,56,],[-14,-15,-16,43,-18,-19,-20,-21,-17,-23,49,51,-26,-24,-27,]),'LBRACE':([49,],[53,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,53,],[2,57,]),'statement':([0,2,53,57,],[3,14,3,14,]),'variable_declaration':([0,2,53,57,],[4,4,4,4,]),'assignment':([0,2,53,57,],[5,5,5,5,]),'write_instruction':([0,2,53,57,],[6,6,6,6,]),'function_definition':([0,2,53,57,],[7,7,7,7,]),'function_call':([0,2,53,57,],[8,8,8,8,]),'expression_list':([11,],[17,]),'expression':([11,16,22,25,28,29,30,31,32,35,52,],[18,26,33,36,38,39,40,41,42,47,56,]),'parameter_list':([34,],[45,]),'argument_list':([35,],[46,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','arith_grammar.py',71),
  ('statement_list -> statement','statement_list',1,'p_statement_list','arith_grammar.py',75),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','arith_grammar.py',76),
  ('statement -> variable_declaration','statement',1,'p_statement','arith_grammar.py',83),
  ('statement -> assignment','statement',1,'p_statement','arith_grammar.py',84),
  ('statement -> write_instruction','statement',1,'p_statement','arith_grammar.py',85),
  ('statement -> function_definition','statement',1,'p_statement','arith_grammar.py',86),
  ('statement -> function_call','statement',1,'p_statement','arith_grammar.py',87),
  ('variable_declaration -> VAR ID ASSIGN expression SEMICOLON','variable_declaration',5,'p_variable_declaration','arith_grammar.py',91),
  ('assignment -> ID ASSIGN expression SEMICOLON','assignment',4,'p_assignment','arith_grammar.py',95),
  ('write_instruction -> PRINT expression_list SEMICOLON','write_instruction',3,'p_write_instruction','arith_grammar.py',99),
  ('expression_list -> expression','expression_list',1,'p_expression_list','arith_grammar.py',103),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','arith_grammar.py',104),
  ('expression -> ID','expression',1,'p_expression','arith_grammar.py',111),
  ('expression -> NUM','expression',1,'p_expression','arith_grammar.py',112),
  ('expression -> STRING','expression',1,'p_expression','arith_grammar.py',113),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','arith_grammar.py',114),
  ('expression -> expression ADD expression','expression',3,'p_expression','arith_grammar.py',115),
  ('expression -> expression SUB expression','expression',3,'p_expression','arith_grammar.py',116),
  ('expression -> expression MUL expression','expression',3,'p_expression','arith_grammar.py',117),
  ('expression -> expression DIV expression','expression',3,'p_expression','arith_grammar.py',118),
  ('function_definition -> FUNCTION ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACE','function_definition',8,'p_function_definition','arith_grammar.py',127),
  ('parameter_list -> ID','parameter_list',1,'p_parameter_list','arith_grammar.py',131),
  ('parameter_list -> parameter_list COMMA ID','parameter_list',3,'p_parameter_list','arith_grammar.py',132),
  ('function_call -> CALL ID LPAREN argument_list RPAREN SEMICOLON','function_call',6,'p_function_call','arith_grammar.py',139),
  ('argument_list -> expression','argument_list',1,'p_argument_list','arith_grammar.py',143),
  ('argument_list -> argument_list COMMA expression','argument_list',3,'p_argument_list','arith_grammar.py',144),
]
